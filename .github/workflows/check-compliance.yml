name: Release Privateer and Run Help

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Privateer repository
  #     uses: actions/checkout@v3
  #     with:
  #       repository: privateerproj/privateer
  #       path: privateer

  #   - name: Set up Go
  #     uses: actions/setup-go@v3
  #     with:
  #       go-version: 1.22

  #   - name: Install dependencies
  #     run: |
  #       cd privateer
  #       go mod download

  #   - name: Run make release
  #     run: |
  #       cd privateer
  #       make release

  #   - name: Run privateer help command
  #     run: |
  #       cd privateer/
  #       # Assuming the binary is named 'privateer'. Adjust if it's named differently.
  #       ./privateer help
      
  #   - name: Archive release artifacts
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: release-artifacts
  #       path: privateer/release/

  #   - name: Archive help output
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: help-output
  #       path: privateer/release/help-output.txt

  terraform:
    name: 'Terraform'
    env: 
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: cd into examples/basic directory
      run: |
        cd examples/basic
        # run ls command
        ls


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

     # On push to "master", build or change infrastructure according to Terraform configuration files
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false